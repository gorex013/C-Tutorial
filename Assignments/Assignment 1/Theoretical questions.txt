1.1 (a) Curly braces denote begin and end of a block of code. A block of code is a set of expressions ending with `;`.
A body of a function is a block of code, but executed only when instantiated.
    (b) 7 is an integer literal. Its type is `const int`.
'7' is a character literal. Its type is `const char`.
"7" is a string literal. Its type is `const char *`.
    (c) 10.0 + 2.0/((3.0-2.0)*2.0)

1.2 1. 18.0/2+1*2+1 = 12.0
    2. 18.0/(2+1)*(2+1) = 18.0
    3. 18.0/(2+1*2+1) = 3.6
    4. 18.0/((2+1)*(2+1)) = 2.0

1.3 1. gcc hello.c -o hello.o
    2. gdb hello.o
       (gdb) run
    3. hello, 6.087 students

1.4 6. #include <stdio.h>

    4. #define MSG1 "All your base are belong to us!"

    2. const char msg[] = MSG1;

    5. int main(void) {
    7. puts(msg);
    1. return 0;
    3. }

1.5 1. For `include` directive, `;` is just an extra token that is not taken in account and doesn't change anything.
    2. function takes as argument an argument a variable with no data type.
    `void` is an incomplete data type that cannot be completed.
    3. after preprocessing we obtain that `puts(MESSAGE);` becomes `puts(= "Happy new year!");`,
    which is incorrect syntactically.
